#!/usr/bin/env python

import sys

from optparse import OptionParser
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import ilwd
from glue.ligolw import utils
from glue.ligolw.utils import process as ligolw_process

class ContentHandler(ligolw.LIGOLWContentHandler):
    pass
lsctables.use_in(ContentHandler)

cols = lsctables.SimInspiralTable.validcolumns

def fill_missing_columns(sngl):
    for entry in cols.keys():
        if not(hasattr(sngl,entry)):
            if cols[entry] in ['real_4','real_8']:
                setattr(sngl,entry,0.)
            elif cols[entry] == 'int_4s':
                setattr(sngl,entry,0)
            elif cols[entry] == 'lstring':
                setattr(sngl,entry,'')
            elif entry == 'process_id':
                sngl.process_id = ilwd.ilwdchar("sim_inspiral:process_id:0")
            elif entry == 'simulation_id':
                sngl.event_id = ilwd.ilwdchar("sim_inspiral:simulation_id:0")
            else:
                print >> sys.stderr, "Column %s not recognized" %(entry)
                raise ValueError

parser = OptionParser(
    usage   = "%prog [OPTIONS]",
    description = "Add fref column to inspinj output" )

parser.add_option("-V", "--verbose", action="store_true", help="print extra debugging information", default=False )
parser.add_option("-i", "--input-file", action="store", type="string",  help="Input file with sngl_inspiral xml table")
parser.add_option("-c", "--catalog-file", action="store", type="string",  help="HDF5 catalog file with sngl_inspiral xml table")
parser.add_option("-o", "--output-file", action="store", type="string",  help="Output file name")
(opts,args) = parser.parse_args()

if not opts.input_file:
    print >> sys.stderr, "--input-file must be supplied"
    sys.exit(1)

if not opts.catalog_file:
    print >> sys.stderr, "--catalog-file must be supplied"
    sys.exit(1)

if not opts.output_file:
    print >> sys.stderr, "--output-file must be supplied"
    sys.exit(1)

oldxml = utils.load_filename(opts.input_file, gz=opts.input_file.endswith('gz'),
                             contenthandler=ContentHandler)
oldSimTable = table.get_table(oldxml,"sim_inspiral")

hdfxml = utils.load_filename(opts.catalog_file, gz=opts.catalog_file.endswith('gz'),
			     contenthandler=ContentHandler)

hdfSimTable = table.get_table(hdfxml, "sim_inspiral")


for key in cols.keys():
    if key not in oldSimTable.columnnames:
        oldSimTable.appendColumn(key)

for sim in oldSimTable:
    nrID = sim.numrel_data
    mtotal = sim.mass1 + sim.mass2
    for nrsim in hdfSimTable:
        if nrsim.numrel_data == nrID:
            fill_missing_columns(sim)
            sim.f_ref = nrsim.f_lower / (lal.TWOPI * lal.MTSUN_SI * mtotal)
        else:
            continue

utils.write_filename(oldxml, opts.output_file,
                     gz=opts.output_file.endswith('gz'))
