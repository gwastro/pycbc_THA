#!/usr/bin/env python

# Copyright (C) 2015 Patricia Schmidt, Ian W. Harry
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
Patricia to write some description of the code here, also appears in help text.
"""

import sys, argparse

import h5py 

from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import ilwd
from glue.ligolw import utils
from glue.ligolw.utils import process as ligolw_process

import pycbc.version

__author__  = "Patricia Schmidt <patricia.schmidt@ligo.org>, "
__author__  += "Ian Harry <ian.harry@ligo.org>"
__version__ = pycbc.version.git_verbose_msg
__date__    = pycbc.version.date
__program__ = "pycbc_make_nr_hdf_catalog"


cols = lsctables.SimInspiralTable.validcolumns

def fill_missing_columns(sim):
    for entry in cols.keys():
        if not(hasattr(sim,entry)):
            if cols[entry] in ['real_4','real_8']:
                setattr(sim,entry,0.)
            elif cols[entry] == 'int_4s':
                setattr(sim,entry,0)
            elif cols[entry] == 'lstring':
                setattr(sim,entry,'')
            elif entry == 'simulation_id' or entry == 'process_id':
                continue
            else:
                print >> sys.stderr, "Column %s not recognized" %(entry)
                raise ValueError

_desc = __doc__[1:]
parser = argparse.ArgumentParser(description=_desc)

parser.add_argument('--version', action='version',
                    version=pycbc.version.git_verbose_msg)
parser.add_argument("-V", "--verbose", action="store_true",
                  help="print extra debugging information", default=False )
parser.add_argument("-o", "--output-file", action="store", type=str,
                  required=True, help="Output file name")
parser.add_argument("-i", "--input-files", nargs= '*', dest='inputs', action="store", type=str,
                          required=True, help="Path to HDF5 input files")
# FIXME: Examples, delete later
#parser.add_argument("-m", "--min-match", action="store", type=float,
#                    default=None, help=
#                    "Generate bank with specified minimum match.  REQUIRED.")
#parser.add_argument("--random-seed", action="store", type=int,
#                    default=None,
#                    help="""Random seed to use when calling numpy.random
#                            functions used in obtaining the principal 
#                            components and when translating points back to 
#                            physical space.  
#                            If given, the code should give the same output 
#                            when run with the same random seed.""")
#parser.add_argument("-O", "--output-file",
#                    help="Output file name.  REQUIRED.")

args = parser.parse_args()

# prepare xmldocument
xmldoc = ligolw.Document()
xmldoc.appendChild(ligolw.LIGO_LW())

proc_id = ligolw_process.register_to_xmldoc(xmldoc, "nr_catalog",
                    args.__dict__, comment="", version=pycbc.version.git_hash,
                    cvs_repository='pycbc/' + pycbc.version.git_branch,
                    cvs_entry_time=pycbc.version.date).process_id

sim_table = lsctables.New(lsctables.SimInspiralTable)

# Some input here to figure out how many injections we have
# FIXME: Hardcoded
inj_list = args.inputs
print inj_list

for count, inj in enumerate(inj_list):
    curr_sim = lsctables.SimInspiral()
    # Add the empty columns
    fill_missing_columns(curr_sim)
    # Set id columns
    curr_sim.process_id = proc_id
    curr_sim.simulation_id = ilwd.ilwdchar("sim_inspiral:simulation_id:%d"\
                                           %(count))
    curr_sim.numrel_data = inj
    # FIXME: Patricia fix!
    print inj
    f = h5py.File(inj, 'r')    #Is this the correct index?
    curr_sim.eta = f.attrs['eta']
    curr_sim.spin1x = f.attrs['spin1x']
    curr_sim.spin1y = f.attrs['spin1y']
    curr_sim.spin1z = f.attrs['spin1z']
    curr_sim.spin2x = f.attrs['spin2x']
    curr_sim.spin2y = f.attrs['spin2y']
    curr_sim.spin2z = f.attrs['spin2z']
    f.close()

    # FIXME: Do we need these?
    curr_sim.f_lower = 0.
    curr_sim.numrel_mode_max = 0
    curr_sim.numrel_mode_min = 0
    
    sim_table.append(curr_sim)

xmldoc.childNodes[-1].appendChild(sim_table)
utils.write_filename(xmldoc, args.output_file,
                     gz=args.output_file.endswith('gz'))
